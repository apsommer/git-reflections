How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The output clearly shows the differences between the files, isolating the error.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Any mistakes are easily reversed, a clear map of the program genesis, data analytics can be applied to the historical data.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    A pro is that the user has complete control over the process, a con is that it requires a mental vigilance and energy.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Software programs are a collection of related files, more suitable to the Git system. Document files, music, etc. are files without relationship to one another, more suitable for single file version control.

How can you use the commands git log and git diff to view the history of files?

    First use git clone to copy the repository, use git log to view each commit summary, use git diff to compare two commits using their log ID's.

How might using version control make you more confident to make changes that
could break something?

    Peace of mind that multiple working versions of the software exist.

Now that you have your workspace set up, what do you want to try using Git for?

    This is an ideal version control system for the Android apps created in the Udacity Android Basics nanodegree.
